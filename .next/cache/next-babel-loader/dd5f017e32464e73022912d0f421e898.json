{"ast":null,"code":"\"use strict\";\n\nvar _redux = require(\"redux\");\n\nvar _reduxThunk = _interopRequireDefault(require(\"redux-thunk\"));\n\nvar _app = _interopRequireDefault(require(\"./reducers/app\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @param {object} initialState\n * @param {boolean} options.isServer indicates whether it is a server side or client side\n * @param {Request} options.req NodeJS Request object (not set when client applies initialState from server)\n * @param {Request} options.res NodeJS Request object (not set when client applies initialState from server)\n * @param {boolean} options.debug User-defined debug mode param\n * @param {string} options.storeKey This key will be used to preserve store in global namespace for safe HMR\n */\nconst makeStore = (initialState, options) => {\n  return (0, _redux.createStore)((0, _redux.combineReducers)({\n    app: _app.default\n  }), initialState, (0, _redux.applyMiddleware)(_reduxThunk.default));\n};\n\nmodule.exports = makeStore;","map":{"version":3,"sources":["/Users/basem/www/nextjs-project/store.js"],"names":["makeStore","initialState","options","app","thunk","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;AAQA,MAAMA,SAAS,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AACzC,SAAO,wBACH,4BAAgB;AAACC,IAAAA,GAAG,EAAHA;AAAD,GAAhB,CADG,EAEHF,YAFG,EAGH,4BAAgBG,mBAAhB,CAHG,CAAP;AAKH,CAND;;AAQAC,MAAM,CAACC,OAAP,GAAiBN,SAAjB","sourcesContent":["import {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport thunk from 'redux-thunk';\nimport app from '~/reducers/app';\n\n/**\n * @param {object} initialState\n * @param {boolean} options.isServer indicates whether it is a server side or client side\n * @param {Request} options.req NodeJS Request object (not set when client applies initialState from server)\n * @param {Request} options.res NodeJS Request object (not set when client applies initialState from server)\n * @param {boolean} options.debug User-defined debug mode param\n * @param {string} options.storeKey This key will be used to preserve store in global namespace for safe HMR\n */\nconst makeStore = (initialState, options) => {\n    return createStore(\n        combineReducers({app}),\n        initialState,\n        applyMiddleware(thunk)\n    );\n};\n\nmodule.exports = makeStore;\n"]},"metadata":{},"sourceType":"script"}